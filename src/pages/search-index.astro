---
import { MarkdownInstance } from "astro"
import fs from "node:fs"

// import .astro files
const pages = await Astro.glob("./**/*.astro")

// import .md files
//const posts = [...(await Astro.glob("./**/*.md")).filter((post) => !post.frontmatter.draft)]
const postsMdx = [...(await Astro.glob("../content/**/*.mdx")).filter((post) => !post.frontmatter.draft)]
const postsMdxWithContent = postsMdx.map((post) => {
  const url = new URL(post.file, import.meta.url)
  var content = fs.readFileSync(url, "utf-8")
  const splittedContent = splitTextByHeadings(content)
  const chunks = splittedContent.map((chunk) => {
    return { ...post, rawContent: () => chunk }
  })
  return chunks
})

function splitTextByHeadings(text) {
  const headingRegex = /^(#{1,4})\s+(.*)$/gm
  const sections = []
  let match
  let lastIndex = 0
  while ((match = headingRegex.exec(text))) {
    const sectionContent = text.substring(lastIndex, match.index).trim()
    const sectionText = sectionContent
    sections.push(sectionText)
    lastIndex = match.index
  }
  // Add the last section (if any) after the last heading
  if (lastIndex < text.length) {
    const sectionContent = text.substring(lastIndex).trim()
    sections.push(sectionContent)
  }
  return sections
}

const markDownFiles = [...postsMdxWithContent].flat()
//const allContent = [...pages, ...postsMdx]

const transformMarkdownInstancesToIndexes = async (instances: MarkdownInstance<Record<string, any>>[]) => {
  return Promise.all(
    instances.map(async (instance) => {
      const { title, section, metadata } = instance.frontmatter
      const headings = await instance.getHeadings()
      const content = !!instance.rawContent ? await instance.rawContent() : undefined

      return {
        title,
        headings,
        url: instance.url,
        section,
        description: metadata?.description ?? undefined,
        content,
      }
    })
  )
}

const index = await transformMarkdownInstancesToIndexes(markDownFiles)

const stringifiedJson = JSON.stringify({ index }, null, 2)

fs.writeFileSync(`${process.cwd()}/public/search-index.json`, stringifiedJson)
---

<meta http-equiv="refresh" content={`0; url=/`} />
